#include "types.hpp"
#include "instructions.hpp"

Instr::Instr(byte opcode) {
    code = opcode;
    bool error = false;
    type.args = vec<itype>(0);
    type.ret  = vec<itype>(0);

// The following switch should be autogenerated
    switch (opcode){
        #include "../opcode_switch.inc"
        default :
            name = "reserved";
    }
// up to here
    if(!error){
        has_args = (type.args.size() > 0);
    }

}

// Getters
instr_type Instr::get_type(){ return type;}
string Instr::get_name(){ return name;}
byte   Instr::get_code(){ return code;}

std::ostream &operator<<(std::ostream &os, const Instr &i){
    std::cout << i.name \
              << "(0x" << std::hex << (int) (i.code) << ")" \
              << " :: " << i.type;
    return os;
}


ptype::ptype(u32 id, bool star, bool maybe): id(id), star(star), maybe(maybe) {};


std::ostream &operator<<(std::ostream &os, const instr_type &type){
    //print the [
    os << "[";
    //print the args types
    for (auto const& type : type.args){
        std::visit([&os](auto t) { os << t << " "; }, type);
    }
    // print the ] - > [
    os << "] â†’ [";
    //print the ret
    for (auto const& type : type.ret){
        std::visit([&os](auto t) { os << t; }, type);
    }
    // print the  ]
    os << "]";
    return os;
}